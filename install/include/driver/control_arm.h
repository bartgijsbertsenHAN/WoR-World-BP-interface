// Generated by gencpp from file driver/control_arm.msg
// DO NOT EDIT!


#ifndef DRIVER_MESSAGE_CONTROL_ARM_H
#define DRIVER_MESSAGE_CONTROL_ARM_H

#include <ros/service_traits.h>


#include <driver/control_armRequest.h>
#include <driver/control_armResponse.h>


namespace driver
{

struct control_arm
{

typedef control_armRequest Request;
typedef control_armResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct control_arm
} // namespace driver


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::driver::control_arm > {
  static const char* value()
  {
    return "9f92a49c54ce202a35ae4e75b5fee653";
  }

  static const char* value(const ::driver::control_arm&) { return value(); }
};

template<>
struct DataType< ::driver::control_arm > {
  static const char* value()
  {
    return "driver/control_arm";
  }

  static const char* value(const ::driver::control_arm&) { return value(); }
};


// service_traits::MD5Sum< ::driver::control_armRequest> should match 
// service_traits::MD5Sum< ::driver::control_arm > 
template<>
struct MD5Sum< ::driver::control_armRequest>
{
  static const char* value()
  {
    return MD5Sum< ::driver::control_arm >::value();
  }
  static const char* value(const ::driver::control_armRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::driver::control_armRequest> should match 
// service_traits::DataType< ::driver::control_arm > 
template<>
struct DataType< ::driver::control_armRequest>
{
  static const char* value()
  {
    return DataType< ::driver::control_arm >::value();
  }
  static const char* value(const ::driver::control_armRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::driver::control_armResponse> should match 
// service_traits::MD5Sum< ::driver::control_arm > 
template<>
struct MD5Sum< ::driver::control_armResponse>
{
  static const char* value()
  {
    return MD5Sum< ::driver::control_arm >::value();
  }
  static const char* value(const ::driver::control_armResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::driver::control_armResponse> should match 
// service_traits::DataType< ::driver::control_arm > 
template<>
struct DataType< ::driver::control_armResponse>
{
  static const char* value()
  {
    return DataType< ::driver::control_arm >::value();
  }
  static const char* value(const ::driver::control_armResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // DRIVER_MESSAGE_CONTROL_ARM_H
