# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from driver/control_armRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_armRequest(genpy.Message):
  _md5sum = "cd10510da7b0daa1c1d87a003f9b006d"
  _type = "driver/control_armRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """int16 base_angle
uint8 base_speed
int16 shoulder_angle
uint8 shoulder_speed
int16 elbow_angle
uint8 elbow_speed
int16 wrist_angle
uint8 wrist_speed
int16 gripper_angle
uint8 gripper_speed
int16 wrist_rotate_angle
uint8 wrist_rotate_speed
uint16 time
"""
  __slots__ = ['base_angle','base_speed','shoulder_angle','shoulder_speed','elbow_angle','elbow_speed','wrist_angle','wrist_speed','gripper_angle','gripper_speed','wrist_rotate_angle','wrist_rotate_speed','time']
  _slot_types = ['int16','uint8','int16','uint8','int16','uint8','int16','uint8','int16','uint8','int16','uint8','uint16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       base_angle,base_speed,shoulder_angle,shoulder_speed,elbow_angle,elbow_speed,wrist_angle,wrist_speed,gripper_angle,gripper_speed,wrist_rotate_angle,wrist_rotate_speed,time

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_armRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.base_angle is None:
        self.base_angle = 0
      if self.base_speed is None:
        self.base_speed = 0
      if self.shoulder_angle is None:
        self.shoulder_angle = 0
      if self.shoulder_speed is None:
        self.shoulder_speed = 0
      if self.elbow_angle is None:
        self.elbow_angle = 0
      if self.elbow_speed is None:
        self.elbow_speed = 0
      if self.wrist_angle is None:
        self.wrist_angle = 0
      if self.wrist_speed is None:
        self.wrist_speed = 0
      if self.gripper_angle is None:
        self.gripper_angle = 0
      if self.gripper_speed is None:
        self.gripper_speed = 0
      if self.wrist_rotate_angle is None:
        self.wrist_rotate_angle = 0
      if self.wrist_rotate_speed is None:
        self.wrist_rotate_speed = 0
      if self.time is None:
        self.time = 0
    else:
      self.base_angle = 0
      self.base_speed = 0
      self.shoulder_angle = 0
      self.shoulder_speed = 0
      self.elbow_angle = 0
      self.elbow_speed = 0
      self.wrist_angle = 0
      self.wrist_speed = 0
      self.gripper_angle = 0
      self.gripper_speed = 0
      self.wrist_rotate_angle = 0
      self.wrist_rotate_speed = 0
      self.time = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_hBhBhBhBhBhBH().pack(_x.base_angle, _x.base_speed, _x.shoulder_angle, _x.shoulder_speed, _x.elbow_angle, _x.elbow_speed, _x.wrist_angle, _x.wrist_speed, _x.gripper_angle, _x.gripper_speed, _x.wrist_rotate_angle, _x.wrist_rotate_speed, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.base_angle, _x.base_speed, _x.shoulder_angle, _x.shoulder_speed, _x.elbow_angle, _x.elbow_speed, _x.wrist_angle, _x.wrist_speed, _x.gripper_angle, _x.gripper_speed, _x.wrist_rotate_angle, _x.wrist_rotate_speed, _x.time,) = _get_struct_hBhBhBhBhBhBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_hBhBhBhBhBhBH().pack(_x.base_angle, _x.base_speed, _x.shoulder_angle, _x.shoulder_speed, _x.elbow_angle, _x.elbow_speed, _x.wrist_angle, _x.wrist_speed, _x.gripper_angle, _x.gripper_speed, _x.wrist_rotate_angle, _x.wrist_rotate_speed, _x.time))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 20
      (_x.base_angle, _x.base_speed, _x.shoulder_angle, _x.shoulder_speed, _x.elbow_angle, _x.elbow_speed, _x.wrist_angle, _x.wrist_speed, _x.gripper_angle, _x.gripper_speed, _x.wrist_rotate_angle, _x.wrist_rotate_speed, _x.time,) = _get_struct_hBhBhBhBhBhBH().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_hBhBhBhBhBhBH = None
def _get_struct_hBhBhBhBhBhBH():
    global _struct_hBhBhBhBhBhBH
    if _struct_hBhBhBhBhBhBH is None:
        _struct_hBhBhBhBhBhBH = struct.Struct("<hBhBhBhBhBhBH")
    return _struct_hBhBhBhBhBhBH
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from driver/control_armResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class control_armResponse(genpy.Message):
  _md5sum = "509793171e494962cd366ecf60e100e4"
  _type = "driver/control_armResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool succes
"""
  __slots__ = ['succes']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       succes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(control_armResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.succes is None:
        self.succes = False
    else:
      self.succes = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_B().pack(self.succes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succes,) = _get_struct_B().unpack(str[start:end])
      self.succes = bool(self.succes)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_get_struct_B().pack(self.succes))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.succes,) = _get_struct_B().unpack(str[start:end])
      self.succes = bool(self.succes)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class control_arm(object):
  _type          = 'driver/control_arm'
  _md5sum = '2830068845fb2505b4060ad2eb804a4f'
  _request_class  = control_armRequest
  _response_class = control_armResponse
